// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/sandbox.proto

package sandbox

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SandboxServiceClient is the client API for SandboxService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SandboxServiceClient interface {
	// 獲取沙箱狀態
	GetStatus(ctx context.Context, in *SandboxStatusRequest, opts ...grpc.CallOption) (*SandboxStatusResponse, error)
	// 添加任務到隊列
	AddJob(ctx context.Context, in *AddJobRequest, opts ...grpc.CallOption) (*AddJobResponse, error)
	// 健康檢查
	HealthCheck(ctx context.Context, in *SandboxStatusRequest, opts ...grpc.CallOption) (*SandboxStatusResponse, error)
}

type sandboxServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSandboxServiceClient(cc grpc.ClientConnInterface) SandboxServiceClient {
	return &sandboxServiceClient{cc}
}

func (c *sandboxServiceClient) GetStatus(ctx context.Context, in *SandboxStatusRequest, opts ...grpc.CallOption) (*SandboxStatusResponse, error) {
	out := new(SandboxStatusResponse)
	err := c.cc.Invoke(ctx, "/sandbox.SandboxService/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandboxServiceClient) AddJob(ctx context.Context, in *AddJobRequest, opts ...grpc.CallOption) (*AddJobResponse, error) {
	out := new(AddJobResponse)
	err := c.cc.Invoke(ctx, "/sandbox.SandboxService/AddJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandboxServiceClient) HealthCheck(ctx context.Context, in *SandboxStatusRequest, opts ...grpc.CallOption) (*SandboxStatusResponse, error) {
	out := new(SandboxStatusResponse)
	err := c.cc.Invoke(ctx, "/sandbox.SandboxService/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SandboxServiceServer is the server API for SandboxService service.
// All implementations must embed UnimplementedSandboxServiceServer
// for forward compatibility
type SandboxServiceServer interface {
	// 獲取沙箱狀態
	GetStatus(context.Context, *SandboxStatusRequest) (*SandboxStatusResponse, error)
	// 添加任務到隊列
	AddJob(context.Context, *AddJobRequest) (*AddJobResponse, error)
	// 健康檢查
	HealthCheck(context.Context, *SandboxStatusRequest) (*SandboxStatusResponse, error)
	mustEmbedUnimplementedSandboxServiceServer()
}

// UnimplementedSandboxServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSandboxServiceServer struct {
}

func (UnimplementedSandboxServiceServer) GetStatus(context.Context, *SandboxStatusRequest) (*SandboxStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedSandboxServiceServer) AddJob(context.Context, *AddJobRequest) (*AddJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddJob not implemented")
}
func (UnimplementedSandboxServiceServer) HealthCheck(context.Context, *SandboxStatusRequest) (*SandboxStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedSandboxServiceServer) mustEmbedUnimplementedSandboxServiceServer() {}

// UnsafeSandboxServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SandboxServiceServer will
// result in compilation errors.
type UnsafeSandboxServiceServer interface {
	mustEmbedUnimplementedSandboxServiceServer()
}

func RegisterSandboxServiceServer(s grpc.ServiceRegistrar, srv SandboxServiceServer) {
	s.RegisterService(&SandboxService_ServiceDesc, srv)
}

func _SandboxService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SandboxStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandboxServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sandbox.SandboxService/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandboxServiceServer).GetStatus(ctx, req.(*SandboxStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SandboxService_AddJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandboxServiceServer).AddJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sandbox.SandboxService/AddJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandboxServiceServer).AddJob(ctx, req.(*AddJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SandboxService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SandboxStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandboxServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sandbox.SandboxService/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandboxServiceServer).HealthCheck(ctx, req.(*SandboxStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SandboxService_ServiceDesc is the grpc.ServiceDesc for SandboxService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SandboxService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sandbox.SandboxService",
	HandlerType: (*SandboxServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _SandboxService_GetStatus_Handler,
		},
		{
			MethodName: "AddJob",
			Handler:    _SandboxService_AddJob_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _SandboxService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/sandbox.proto",
}

// SchedulerServiceClient is the client API for SchedulerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchedulerServiceClient interface {
	// 註冊沙箱實例（舊接口，保留兼容性）
	RegisterSandbox(ctx context.Context, in *RegisterSandboxRequest, opts ...grpc.CallOption) (*RegisterSandboxResponse, error)
	// 註銷沙箱實例
	UnregisterSandbox(ctx context.Context, in *UnregisterSandboxRequest, opts ...grpc.CallOption) (*UnregisterSandboxResponse, error)
	// 發送心跳
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
	// 沙箱雙向流連接（新接口）
	SandboxStream(ctx context.Context, opts ...grpc.CallOption) (SchedulerService_SandboxStreamClient, error)
}

type schedulerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSchedulerServiceClient(cc grpc.ClientConnInterface) SchedulerServiceClient {
	return &schedulerServiceClient{cc}
}

func (c *schedulerServiceClient) RegisterSandbox(ctx context.Context, in *RegisterSandboxRequest, opts ...grpc.CallOption) (*RegisterSandboxResponse, error) {
	out := new(RegisterSandboxResponse)
	err := c.cc.Invoke(ctx, "/sandbox.SchedulerService/RegisterSandbox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerServiceClient) UnregisterSandbox(ctx context.Context, in *UnregisterSandboxRequest, opts ...grpc.CallOption) (*UnregisterSandboxResponse, error) {
	out := new(UnregisterSandboxResponse)
	err := c.cc.Invoke(ctx, "/sandbox.SchedulerService/UnregisterSandbox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerServiceClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, "/sandbox.SchedulerService/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerServiceClient) SandboxStream(ctx context.Context, opts ...grpc.CallOption) (SchedulerService_SandboxStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &SchedulerService_ServiceDesc.Streams[0], "/sandbox.SchedulerService/SandboxStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &schedulerServiceSandboxStreamClient{stream}
	return x, nil
}

type SchedulerService_SandboxStreamClient interface {
	Send(*SandboxMessage) error
	Recv() (*SchedulerMessage, error)
	grpc.ClientStream
}

type schedulerServiceSandboxStreamClient struct {
	grpc.ClientStream
}

func (x *schedulerServiceSandboxStreamClient) Send(m *SandboxMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *schedulerServiceSandboxStreamClient) Recv() (*SchedulerMessage, error) {
	m := new(SchedulerMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SchedulerServiceServer is the server API for SchedulerService service.
// All implementations must embed UnimplementedSchedulerServiceServer
// for forward compatibility
type SchedulerServiceServer interface {
	// 註冊沙箱實例（舊接口，保留兼容性）
	RegisterSandbox(context.Context, *RegisterSandboxRequest) (*RegisterSandboxResponse, error)
	// 註銷沙箱實例
	UnregisterSandbox(context.Context, *UnregisterSandboxRequest) (*UnregisterSandboxResponse, error)
	// 發送心跳
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	// 沙箱雙向流連接（新接口）
	SandboxStream(SchedulerService_SandboxStreamServer) error
	mustEmbedUnimplementedSchedulerServiceServer()
}

// UnimplementedSchedulerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSchedulerServiceServer struct {
}

func (UnimplementedSchedulerServiceServer) RegisterSandbox(context.Context, *RegisterSandboxRequest) (*RegisterSandboxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterSandbox not implemented")
}
func (UnimplementedSchedulerServiceServer) UnregisterSandbox(context.Context, *UnregisterSandboxRequest) (*UnregisterSandboxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterSandbox not implemented")
}
func (UnimplementedSchedulerServiceServer) Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedSchedulerServiceServer) SandboxStream(SchedulerService_SandboxStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SandboxStream not implemented")
}
func (UnimplementedSchedulerServiceServer) mustEmbedUnimplementedSchedulerServiceServer() {}

// UnsafeSchedulerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchedulerServiceServer will
// result in compilation errors.
type UnsafeSchedulerServiceServer interface {
	mustEmbedUnimplementedSchedulerServiceServer()
}

func RegisterSchedulerServiceServer(s grpc.ServiceRegistrar, srv SchedulerServiceServer) {
	s.RegisterService(&SchedulerService_ServiceDesc, srv)
}

func _SchedulerService_RegisterSandbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterSandboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServiceServer).RegisterSandbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sandbox.SchedulerService/RegisterSandbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServiceServer).RegisterSandbox(ctx, req.(*RegisterSandboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulerService_UnregisterSandbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterSandboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServiceServer).UnregisterSandbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sandbox.SchedulerService/UnregisterSandbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServiceServer).UnregisterSandbox(ctx, req.(*UnregisterSandboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulerService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sandbox.SchedulerService/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServiceServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulerService_SandboxStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SchedulerServiceServer).SandboxStream(&schedulerServiceSandboxStreamServer{stream})
}

type SchedulerService_SandboxStreamServer interface {
	Send(*SchedulerMessage) error
	Recv() (*SandboxMessage, error)
	grpc.ServerStream
}

type schedulerServiceSandboxStreamServer struct {
	grpc.ServerStream
}

func (x *schedulerServiceSandboxStreamServer) Send(m *SchedulerMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *schedulerServiceSandboxStreamServer) Recv() (*SandboxMessage, error) {
	m := new(SandboxMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SchedulerService_ServiceDesc is the grpc.ServiceDesc for SchedulerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SchedulerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sandbox.SchedulerService",
	HandlerType: (*SchedulerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterSandbox",
			Handler:    _SchedulerService_RegisterSandbox_Handler,
		},
		{
			MethodName: "UnregisterSandbox",
			Handler:    _SchedulerService_UnregisterSandbox_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _SchedulerService_Heartbeat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SandboxStream",
			Handler:       _SchedulerService_SandboxStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/sandbox.proto",
}
