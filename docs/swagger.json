{
    "swagger": "2.0",
    "info": {
        "description": "This is a simple OJ-PoC API server.",
        "title": "OJ-PoC API",
        "contact": {},
        "version": "1.0"
    },
    "basePath": "/",
    "paths": {
        "/api/admin/user": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all user information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Get all user information",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "page number of results to return (1-based)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page size of results. Default is 10.",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/handlers.GetAllUserInfoResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/admin/{id}/user": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get the user information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Get user information",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.User"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update the user information (partially or fully)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Update user information",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User information",
                        "name": "user",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateUserInfoDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.User"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/admin/{id}/user/reset_password": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Reset the password of a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Reset user password",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/handlers.ResetUserPasswordDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/auth/login": {
            "post": {
                "description": "Use basic authentication or token to login and get access token and refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "User login with username and password",
                "parameters": [
                    {
                        "description": "Login Request",
                        "name": "LoginRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return access token and refresh token",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable"
                    }
                }
            }
        },
        "/api/auth/logout": {
            "post": {
                "description": "Logout user and invalidate refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Logout user",
                "responses": {
                    "200": {
                        "description": "Logout successful",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/api/auth/refresh": {
            "post": {
                "description": "Use refresh token to get a new access token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Refresh access token",
                "responses": {
                    "200": {
                        "description": "Return new access token",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "401": {
                        "description": "Invalid refresh token",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "503": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/api/exams": {
            "get": {
                "description": "Retrieve a list of all exams",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exam"
                ],
                "summary": "List all exams",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/handlers.ExamListData"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/api/exams/admin": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new exam with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exam"
                ],
                "summary": "Create a new exam",
                "parameters": [
                    {
                        "description": "Exam details",
                        "name": "exam",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.ExamRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Exam"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/exams/admin/{id}/exam": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve an exam's details using its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exam"
                ],
                "summary": "Get an exam by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Exam ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Exam"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update the details of an existing exam by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exam"
                ],
                "summary": "Update an existing exam",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Exam ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated exam details",
                        "name": "exam",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Exam"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Exam"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete an exam using its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exam"
                ],
                "summary": "Delete an exam by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Exam ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/api/exams/admin/{id}/questions/{question_id}/question": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Associate a question with a specific exam",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exam"
                ],
                "summary": "Add a question to an exam",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Exam ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Question ID",
                        "name": "question_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Score for the question",
                        "name": "point",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.point"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Disassociate a question from a specific exam",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exam"
                ],
                "summary": "Remove a question from an exam",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Exam ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Question ID",
                        "name": "question_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/api/exams/{id}/exam": {
            "get": {
                "description": "Retrieve basic information about an exam, including title, description, start and end times",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exam"
                ],
                "summary": "Get basic information about an exam",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Exam ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/handlers.ExamInfoResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/api/exams/{id}/leaderboard": {
            "get": {
                "description": "Retrieve the leaderboard for a specific exam",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exam"
                ],
                "summary": "Get the leaderboard for an exam",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Exam ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page number of results to return (1-based)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size of results. Default is 10.",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/handlers.EnhancedGetLeaderboardResponseData"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "503": {
                        "description": "Service Unavailable"
                    }
                }
            }
        },
        "/api/exams/{id}/questions": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve all questions associated with a specific exam with user's question status and top scores (if authenticated)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exam"
                ],
                "summary": "Get questions for an exam",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Exam ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "page number of results to return (1-based)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page size of results. Default is 10.",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/handlers.ExamQuestionsResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/api/exams/{id}/score/top": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve the top scores for each question in a specific exam for a user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exam"
                ],
                "summary": "Get top scores for each question in an exam",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Exam ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "page number of results to return (1-based)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page size of results. Default is 10.",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/handlers.GetTopExamScoreResponseData"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "503": {
                        "description": "Service Unavailable"
                    }
                }
            }
        },
        "/api/gitea": {
            "post": {
                "description": "Receive Gitea hook",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Gitea"
                ],
                "summary": "Receive Gitea hook",
                "parameters": [
                    {
                        "description": "Gitea Hook",
                        "name": "hook",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.WebhookPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "$ref": "#/definitions/handlers.WebhookPayload"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "410": {
                        "description": "Gone",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/api/gitea/admin/user/bulk": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Bulk create User",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Gitea"
                ],
                "summary": "Bulk create User",
                "parameters": [
                    {
                        "description": "Username + Email Domain =\u003e username1@example.com",
                        "name": "Usernames",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.BulkCreateUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return successful and failed users",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/handlers.BulkCreateUserResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "503": {
                        "description": "Service Unavailable"
                    }
                }
            }
        },
        "/api/gitea/admin/user/bulk_v2": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Bulk create User v2",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Gitea"
                ],
                "summary": "Bulk create User v2",
                "parameters": [
                    {
                        "description": "User Email, Username, Password",
                        "name": "BulkCreateUserRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.BulkCreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return successful and failed users",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/handlers.BulkCreateUserResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "503": {
                        "description": "Service Unavailable"
                    }
                }
            }
        },
        "/api/gitea/auth": {
            "post": {
                "description": "Use basic authentication to access the Gitea API",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Gitea"
                ],
                "summary": "Use basic authentication to access the Gitea API",
                "parameters": [
                    {
                        "description": "Basic Authentication",
                        "name": "BasicAuthentication",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.BasicAuthentication"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return access token",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable"
                    }
                }
            }
        },
        "/api/gitea/user": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get User Profile",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Gitea"
                ],
                "summary": "Get User Profile",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/gitea.User"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "503": {
                        "description": "Service Unavailable"
                    }
                }
            }
        },
        "/api/gitea/user/keys": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a public key in Gitea",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Gitea"
                ],
                "summary": "Create a public key in Gitea",
                "parameters": [
                    {
                        "description": "Public Key",
                        "name": "CreatePublicKey",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreatePublicKey"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "503": {
                        "description": "Service Unavailable"
                    }
                }
            }
        },
        "/api/gitea/{question_id}/question": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Take a question and create a repository in Gitea",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Gitea"
                ],
                "summary": "Take a question and create a repository in Gitea",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Question ID",
                        "name": "question_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "503": {
                        "description": "Service Unavailable"
                    }
                }
            }
        },
        "/api/questions": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a list of questions. Authentication is optional - if authenticated, shows user's question status and top score.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Question"
                ],
                "summary": "Get a list of questions [Optional Authentication]",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "page number of results to return (1-based)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page size of results. Default is 10.",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by question status: 'all', 'active', or 'expired'. Default is 'all'.",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/handlers.GetQuestionListResponseData"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "503": {
                        "description": "Service Unavailable"
                    }
                }
            }
        },
        "/api/questions/admin/question": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Add a question",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Question"
                ],
                "summary": "Add a question",
                "parameters": [
                    {
                        "description": "Question object",
                        "name": "question",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.AddQuestionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/handlers.AddQuestionResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "503": {
                        "description": "Service Unavailable"
                    }
                }
            }
        },
        "/api/questions/admin/{ID}/question": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a question",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Question"
                ],
                "summary": "Delete a question",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the Question to delete",
                        "name": "ID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Question"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "503": {
                        "description": "Service Unavailable"
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update a question",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Question"
                ],
                "summary": "Update a question",
                "parameters": [
                    {
                        "description": "Question object",
                        "name": "question",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.PatchQuestionRequest"
                        }
                    },
                    {
                        "type": "integer",
                        "description": "ID of the Question to update",
                        "name": "ID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Question"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "503": {
                        "description": "Service Unavailable"
                    }
                }
            }
        },
        "/api/questions/admin/{ID}/test_script": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get the test script for a question",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Question"
                ],
                "summary": "Get the test script for a question",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the Question to get the test script for",
                        "name": "ID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/handlers.QuestionTestScript"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "503": {
                        "description": "Service Unavailable"
                    }
                }
            }
        },
        "/api/questions/uqr/{UQR_ID}/question": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a question by UQR_ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Question"
                ],
                "summary": "Get a question by UQR_ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the UserQuestionRelation to get",
                        "name": "UQR_ID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/handlers.GetQuestionResponseData"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "503": {
                        "description": "Service Unavailable"
                    }
                }
            }
        },
        "/api/questions/user": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a list of questions by user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Question"
                ],
                "summary": "Get a list of questions by user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "page number of results to return (1-based)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page size of results. Default is 10.",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/handlers.GetUsersQuestionsResponseData"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "503": {
                        "description": "Service Unavailable"
                    }
                }
            }
        },
        "/api/questions/user/{ID}/question": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a specific question associated with a user by its Question ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Question"
                ],
                "summary": "Get a user's question by Question ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the Question to get",
                        "name": "ID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/handlers.GetUserQuestionResponseData"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "503": {
                        "description": "Service Unavailable"
                    }
                }
            }
        },
        "/api/questions/{ID}/question": {
            "get": {
                "description": "Retrieve only public questions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Question"
                ],
                "summary": "Get a question by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the Question to get",
                        "name": "ID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/handlers.GetQuestionResponseData"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "503": {
                        "description": "Service Unavailable"
                    }
                }
            }
        },
        "/api/sandbox/admin/sandbox_cmd": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Specify the shell command for the corresponding repo",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sandbox"
                ],
                "summary": "Specify the shell command for the corresponding repo",
                "parameters": [
                    {
                        "description": "Shell command",
                        "name": "cmd",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.Sandbox"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.QuestionTestScript"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "503": {
                        "description": "Service Unavailable"
                    }
                }
            }
        },
        "/api/sandbox/status": {
            "get": {
                "description": "Get the current available sandbox count and waiting count",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sandbox"
                ],
                "summary": "Get the current available sandbox count and waiting count",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/handlers.StatusResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/api/score": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a score by repo",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Score"
                ],
                "summary": "Get a score by repo",
                "parameters": [
                    {
                        "type": "string",
                        "description": "owner of the repo",
                        "name": "owner",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "name of the repo",
                        "name": "repo",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "page number of results to return (1-based)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page size of results. Default is 10.",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/handlers.GetScoreResponseData"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "503": {
                        "description": "Service Unavailable"
                    }
                }
            }
        },
        "/api/score/admin/{question_id}/question/rescore": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Re-score a specific question by question ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Score"
                ],
                "summary": "Re-score a specific question",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "question ID",
                        "name": "question_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "503": {
                        "description": "Service Unavailable"
                    }
                }
            }
        },
        "/api/score/all": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all scores for the user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Score"
                ],
                "summary": "Get all scores for the user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "page number of results to return (1-based)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page size of results. Default is 10.",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/handlers.GetTopScoreResponseData"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "503": {
                        "description": "Service Unavailable"
                    }
                }
            }
        },
        "/api/score/leaderboard": {
            "get": {
                "description": "Get the leaderboard",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Score"
                ],
                "summary": "Get the leaderboard",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "page number of results to return (1-based)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page size of results. Default is 10.",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/handlers.GetLeaderboardResponseData"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "503": {
                        "description": "Service Unavailable"
                    }
                }
            }
        },
        "/api/score/top": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get the top score of each question for user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Score"
                ],
                "summary": "Get the top score of each question for user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "page number of results to return (1-based)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page size of results. Default is 10.",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/handlers.GetTopScoreResponseData"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "503": {
                        "description": "Service Unavailable"
                    }
                }
            }
        },
        "/api/score/uqr/{UQR_ID}/score": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a score by UQR ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Score"
                ],
                "summary": "Get a score by UQR ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "UQR ID",
                        "name": "UQR_ID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "page number of results to return (1-based)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page size of results. Default is 10.",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/handlers.Score"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "503": {
                        "description": "Service Unavailable"
                    }
                }
            }
        },
        "/api/score/{question_id}/question": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a score by question ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Score"
                ],
                "summary": "Get a score by question ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "question ID",
                        "name": "question_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "page number of results to return (1-based)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page size of results. Default is 10.",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/handlers.Score"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "503": {
                        "description": "Service Unavailable"
                    }
                }
            }
        },
        "/api/score/{question_id}/question/user_rescore": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Re-score a specific user's question by question ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Score"
                ],
                "summary": "Re-score a specific user's question",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "question ID",
                        "name": "question_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "503": {
                        "description": "Service Unavailable"
                    }
                }
            }
        },
        "/api/user": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get user info by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get user info",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/handlers.GetUserData"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    }
                }
            }
        },
        "/api/user/change_password": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Change user password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Change user password",
                "parameters": [
                    {
                        "description": "ChangeUserPasswordRequest",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.ChangeUserPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "503": {
                        "description": "Service Unavailable"
                    }
                }
            }
        },
        "/api/user/is_public": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update the user's is_public setting",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Set user is_public",
                "parameters": [
                    {
                        "description": "is_public",
                        "name": "is_public",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.IsPublicRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.User"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseHTTP"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "gitea.Commit": {
            "type": "object",
            "properties": {
                "author": {
                    "$ref": "#/definitions/gitea.User"
                },
                "commit": {
                    "$ref": "#/definitions/gitea.RepoCommit"
                },
                "committer": {
                    "$ref": "#/definitions/gitea.User"
                },
                "created": {
                    "type": "string"
                },
                "files": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/gitea.CommitAffectedFiles"
                    }
                },
                "html_url": {
                    "type": "string"
                },
                "parents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/gitea.CommitMeta"
                    }
                },
                "sha": {
                    "type": "string"
                },
                "stats": {
                    "$ref": "#/definitions/gitea.CommitStats"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "gitea.CommitAffectedFiles": {
            "type": "object",
            "properties": {
                "filename": {
                    "type": "string"
                }
            }
        },
        "gitea.CommitMeta": {
            "type": "object",
            "properties": {
                "created": {
                    "type": "string"
                },
                "sha": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "gitea.CommitStats": {
            "type": "object",
            "properties": {
                "additions": {
                    "type": "integer"
                },
                "deletions": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "gitea.CommitUser": {
            "type": "object",
            "properties": {
                "date": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "gitea.ExternalTracker": {
            "type": "object",
            "properties": {
                "external_tracker_format": {
                    "description": "External Issue Tracker URL Format. Use the placeholders {user}, {repo} and {index} for the username, repository name and issue index.",
                    "type": "string"
                },
                "external_tracker_style": {
                    "description": "External Issue Tracker Number Format, either `numeric` or `alphanumeric`",
                    "type": "string"
                },
                "external_tracker_url": {
                    "description": "URL of external issue tracker.",
                    "type": "string"
                }
            }
        },
        "gitea.ExternalWiki": {
            "type": "object",
            "properties": {
                "external_wiki_url": {
                    "description": "URL of external wiki.",
                    "type": "string"
                }
            }
        },
        "gitea.InternalTracker": {
            "type": "object",
            "properties": {
                "allow_only_contributors_to_track_time": {
                    "description": "Let only contributors track time (Built-in issue tracker)",
                    "type": "boolean"
                },
                "enable_issue_dependencies": {
                    "description": "Enable dependencies for issues and pull requests (Built-in issue tracker)",
                    "type": "boolean"
                },
                "enable_time_tracker": {
                    "description": "Enable time tracking (Built-in issue tracker)",
                    "type": "boolean"
                }
            }
        },
        "gitea.MergeStyle": {
            "type": "string",
            "enum": [
                "merge",
                "rebase",
                "rebase-merge",
                "squash"
            ],
            "x-enum-varnames": [
                "MergeStyleMerge",
                "MergeStyleRebase",
                "MergeStyleRebaseMerge",
                "MergeStyleSquash"
            ]
        },
        "gitea.PayloadCommitVerification": {
            "type": "object",
            "properties": {
                "payload": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                },
                "signature": {
                    "type": "string"
                },
                "verified": {
                    "type": "boolean"
                }
            }
        },
        "gitea.Permission": {
            "type": "object",
            "properties": {
                "admin": {
                    "type": "boolean"
                },
                "pull": {
                    "type": "boolean"
                },
                "push": {
                    "type": "boolean"
                }
            }
        },
        "gitea.ProjectsMode": {
            "type": "string",
            "enum": [
                "repo",
                "owner",
                "all"
            ],
            "x-enum-varnames": [
                "ProjectsModeRepo",
                "ProjectsModeOwner",
                "ProjectsModeAll"
            ]
        },
        "gitea.RepoCommit": {
            "type": "object",
            "properties": {
                "author": {
                    "$ref": "#/definitions/gitea.CommitUser"
                },
                "committer": {
                    "$ref": "#/definitions/gitea.CommitUser"
                },
                "message": {
                    "type": "string"
                },
                "tree": {
                    "$ref": "#/definitions/gitea.CommitMeta"
                },
                "url": {
                    "type": "string"
                },
                "verification": {
                    "$ref": "#/definitions/gitea.PayloadCommitVerification"
                }
            }
        },
        "gitea.Repository": {
            "type": "object",
            "properties": {
                "allow_fast_forward_only_merge": {
                    "type": "boolean"
                },
                "allow_merge_commits": {
                    "type": "boolean"
                },
                "allow_rebase": {
                    "type": "boolean"
                },
                "allow_rebase_explicit": {
                    "type": "boolean"
                },
                "allow_squash_merge": {
                    "type": "boolean"
                },
                "archived": {
                    "type": "boolean"
                },
                "avatar_url": {
                    "type": "string"
                },
                "clone_url": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "default_branch": {
                    "type": "string"
                },
                "default_delete_branch_after_merge": {
                    "type": "boolean"
                },
                "default_merge_style": {
                    "$ref": "#/definitions/gitea.MergeStyle"
                },
                "description": {
                    "type": "string"
                },
                "empty": {
                    "type": "boolean"
                },
                "external_tracker": {
                    "$ref": "#/definitions/gitea.ExternalTracker"
                },
                "external_wiki": {
                    "$ref": "#/definitions/gitea.ExternalWiki"
                },
                "fork": {
                    "type": "boolean"
                },
                "forks_count": {
                    "type": "integer"
                },
                "full_name": {
                    "type": "string"
                },
                "has_actions": {
                    "type": "boolean"
                },
                "has_issues": {
                    "type": "boolean"
                },
                "has_packages": {
                    "type": "boolean"
                },
                "has_projects": {
                    "type": "boolean"
                },
                "has_pull_requests": {
                    "type": "boolean"
                },
                "has_releases": {
                    "type": "boolean"
                },
                "has_wiki": {
                    "type": "boolean"
                },
                "html_url": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "ignore_whitespace_conflicts": {
                    "type": "boolean"
                },
                "internal": {
                    "type": "boolean"
                },
                "internal_tracker": {
                    "$ref": "#/definitions/gitea.InternalTracker"
                },
                "mirror": {
                    "type": "boolean"
                },
                "mirror_interval": {
                    "type": "string"
                },
                "mirror_updated": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "object_format_name": {
                    "type": "string"
                },
                "open_issues_count": {
                    "type": "integer"
                },
                "open_pr_counter": {
                    "type": "integer"
                },
                "original_url": {
                    "type": "string"
                },
                "owner": {
                    "$ref": "#/definitions/gitea.User"
                },
                "parent": {
                    "$ref": "#/definitions/gitea.Repository"
                },
                "permissions": {
                    "$ref": "#/definitions/gitea.Permission"
                },
                "private": {
                    "type": "boolean"
                },
                "projects_mode": {
                    "$ref": "#/definitions/gitea.ProjectsMode"
                },
                "release_counter": {
                    "type": "integer"
                },
                "size": {
                    "type": "integer"
                },
                "ssh_url": {
                    "type": "string"
                },
                "stars_count": {
                    "type": "integer"
                },
                "template": {
                    "type": "boolean"
                },
                "updated_at": {
                    "type": "string"
                },
                "watchers_count": {
                    "type": "integer"
                },
                "website": {
                    "type": "string"
                }
            }
        },
        "gitea.User": {
            "type": "object",
            "properties": {
                "active": {
                    "description": "Is user active",
                    "type": "boolean"
                },
                "avatar_url": {
                    "description": "URL to the user's avatar",
                    "type": "string"
                },
                "created": {
                    "description": "Date and Time of user creation",
                    "type": "string"
                },
                "description": {
                    "description": "the user's description",
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "followers_count": {
                    "description": "user counts",
                    "type": "integer"
                },
                "following_count": {
                    "type": "integer"
                },
                "full_name": {
                    "description": "the user's full name",
                    "type": "string"
                },
                "id": {
                    "description": "the user's id",
                    "type": "integer"
                },
                "is_admin": {
                    "description": "Is the user an administrator",
                    "type": "boolean"
                },
                "language": {
                    "description": "User locale",
                    "type": "string"
                },
                "last_login": {
                    "description": "Date and Time of last login",
                    "type": "string"
                },
                "location": {
                    "description": "the user's location",
                    "type": "string"
                },
                "login": {
                    "description": "the user's username",
                    "type": "string"
                },
                "login_name": {
                    "description": "The login_name of non local users (e.g. LDAP / OAuth / SMTP)",
                    "type": "string"
                },
                "prohibit_login": {
                    "description": "Is user login prohibited",
                    "type": "boolean"
                },
                "restricted": {
                    "description": "Is user restricted",
                    "type": "boolean"
                },
                "source_id": {
                    "description": "The ID of the Authentication Source for non local users.",
                    "type": "integer"
                },
                "starred_repos_count": {
                    "type": "integer"
                },
                "visibility": {
                    "description": "User visibility level option",
                    "allOf": [
                        {
                            "$ref": "#/definitions/gitea.VisibleType"
                        }
                    ]
                },
                "website": {
                    "description": "the user's website",
                    "type": "string"
                }
            }
        },
        "gitea.VisibleType": {
            "type": "string",
            "enum": [
                "public",
                "limited",
                "private"
            ],
            "x-enum-varnames": [
                "VisibleTypePublic",
                "VisibleTypeLimited",
                "VisibleTypePrivate"
            ]
        },
        "handlers.AddQuestionRequest": {
            "type": "object",
            "required": [
                "description",
                "git_repo_url",
                "title"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Question Description"
                },
                "end_time": {
                    "type": "string",
                    "example": "2006-01-02T15:04:05Z"
                },
                "git_repo_url": {
                    "type": "string",
                    "example": "user_name/repo_name"
                },
                "is_active": {
                    "type": "boolean",
                    "example": true
                },
                "start_time": {
                    "type": "string",
                    "example": "2006-01-02T15:04:05Z"
                },
                "title": {
                    "type": "string",
                    "example": "Question Title"
                }
            }
        },
        "handlers.AddQuestionResponse": {
            "type": "object",
            "required": [
                "description",
                "git_repo_url",
                "title"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Question Description"
                },
                "end_time": {
                    "type": "string",
                    "example": "2006-01-02T15:04:05Z"
                },
                "git_repo_url": {
                    "type": "string",
                    "example": "user_name/repo_name"
                },
                "id": {
                    "type": "integer",
                    "example": 123
                },
                "is_active": {
                    "type": "boolean",
                    "example": true
                },
                "start_time": {
                    "type": "string",
                    "example": "2006-01-02T15:04:05Z"
                },
                "title": {
                    "type": "string",
                    "example": "Question Title"
                }
            }
        },
        "handlers.BasicAuthentication": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "example": "password"
                },
                "username": {
                    "type": "string",
                    "example": "username"
                }
            }
        },
        "handlers.BulkCreateUser": {
            "type": "object",
            "required": [
                "default_password",
                "email_domain",
                "usernames"
            ],
            "properties": {
                "default_password": {
                    "type": "string",
                    "example": "password"
                },
                "email_domain": {
                    "type": "string",
                    "example": "example.com"
                },
                "usernames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "username1",
                        "username2"
                    ]
                }
            }
        },
        "handlers.BulkCreateUserItem": {
            "type": "object",
            "required": [
                "email",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "username1@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "password"
                },
                "username": {
                    "type": "string",
                    "example": "username1"
                }
            }
        },
        "handlers.BulkCreateUserRequest": {
            "type": "object",
            "required": [
                "user"
            ],
            "properties": {
                "user": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.BulkCreateUserItem"
                    }
                }
            }
        },
        "handlers.BulkCreateUserResponse": {
            "type": "object",
            "properties": {
                "failed_users": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "username1": "error"
                    }
                },
                "successful_users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "username1"
                    ]
                }
            }
        },
        "handlers.ChangeUserPasswordRequest": {
            "type": "object",
            "required": [
                "new_password",
                "old_password"
            ],
            "properties": {
                "new_password": {
                    "type": "string"
                },
                "old_password": {
                    "type": "string"
                }
            }
        },
        "handlers.CreatePublicKey": {
            "type": "object",
            "required": [
                "key",
                "read_only",
                "title"
            ],
            "properties": {
                "key": {
                    "type": "string",
                    "example": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC3..."
                },
                "read_only": {
                    "type": "boolean",
                    "example": true
                },
                "title": {
                    "type": "string",
                    "example": "Public Key"
                }
            }
        },
        "handlers.EnhancedGetLeaderboardResponseData": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "scores": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.EnhancedLeaderboardScore"
                    }
                }
            }
        },
        "handlers.EnhancedLeaderboardScore": {
            "type": "object",
            "properties": {
                "question_scores": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.EnhancedQuestionScore"
                    }
                },
                "total_score": {
                    "type": "number"
                },
                "user_name": {
                    "type": "string"
                }
            }
        },
        "handlers.EnhancedQuestionScore": {
            "type": "object",
            "properties": {
                "git_user_repo_url": {
                    "type": "string"
                },
                "question_id": {
                    "type": "integer"
                },
                "question_title": {
                    "type": "string"
                },
                "score": {
                    "type": "number"
                },
                "weighted_score": {
                    "type": "number"
                }
            }
        },
        "handlers.ExamInfoResponse": {
            "type": "object",
            "properties": {
                "exam_description": {
                    "type": "string"
                },
                "exam_end_time": {
                    "type": "string",
                    "example": "2006-01-02T15:04:05Z"
                },
                "exam_start_time": {
                    "type": "string",
                    "example": "2006-01-02T15:04:05Z"
                },
                "exam_title": {
                    "type": "string"
                }
            }
        },
        "handlers.ExamListData": {
            "type": "object",
            "required": [
                "title"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "end_time": {
                    "type": "string",
                    "example": "2006-01-02T15:04:05Z"
                },
                "id": {
                    "type": "integer"
                },
                "start_time": {
                    "type": "string",
                    "example": "2006-01-02T15:04:05Z"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "handlers.ExamQuestionData": {
            "type": "object",
            "properties": {
                "has_question": {
                    "type": "boolean"
                },
                "point": {
                    "type": "integer"
                },
                "question": {
                    "$ref": "#/definitions/models.Question"
                },
                "top_score": {
                    "type": "integer"
                }
            }
        },
        "handlers.ExamQuestionsResponse": {
            "type": "object",
            "properties": {
                "question_count": {
                    "type": "integer"
                },
                "questions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.ExamQuestionData"
                    }
                }
            }
        },
        "handlers.ExamRequest": {
            "type": "object",
            "required": [
                "title"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "end_time": {
                    "type": "string",
                    "example": "2006-01-02T15:04:05Z"
                },
                "start_time": {
                    "type": "string",
                    "example": "2006-01-02T15:04:05Z"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "handlers.GetAllUserInfoResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.User"
                    }
                },
                "totalCount": {
                    "type": "integer"
                }
            }
        },
        "handlers.GetLeaderboardResponseData": {
            "type": "object",
            "required": [
                "count",
                "scores"
            ],
            "properties": {
                "count": {
                    "type": "integer"
                },
                "scores": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.LeaderboardScore"
                    }
                }
            }
        },
        "handlers.GetQuestionListResponseData": {
            "type": "object",
            "required": [
                "question_count",
                "questions"
            ],
            "properties": {
                "question_count": {
                    "type": "integer"
                },
                "questions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers._GetQuestionListQuestionData"
                    }
                }
            }
        },
        "handlers.GetQuestionResponseData": {
            "type": "object",
            "required": [
                "description",
                "git_repo_url",
                "parent_git_repo_url",
                "readme",
                "title"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "git_repo_url": {
                    "type": "string"
                },
                "parent_git_repo_url": {
                    "type": "string"
                },
                "readme": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "handlers.GetScoreResponseData": {
            "type": "object",
            "required": [
                "scores",
                "scores_count"
            ],
            "properties": {
                "scores": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.Score"
                    }
                },
                "scores_count": {
                    "type": "integer"
                }
            }
        },
        "handlers.GetTopExamScoreResponseData": {
            "type": "object",
            "required": [
                "scores",
                "scores_count"
            ],
            "properties": {
                "scores": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.TopExamScore"
                    }
                },
                "scores_count": {
                    "type": "integer"
                }
            }
        },
        "handlers.GetTopScoreResponseData": {
            "type": "object",
            "required": [
                "scores",
                "scores_count"
            ],
            "properties": {
                "scores": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.TopScore"
                    }
                },
                "scores_count": {
                    "type": "integer"
                }
            }
        },
        "handlers.GetUserData": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "enable": {
                    "type": "boolean"
                },
                "id": {
                    "type": "integer"
                },
                "is_admin": {
                    "type": "boolean"
                },
                "is_public": {
                    "type": "boolean"
                },
                "user_name": {
                    "type": "string"
                }
            }
        },
        "handlers.GetUserQuestionResponseData": {
            "type": "object",
            "required": [
                "description",
                "git_repo_url",
                "parent_git_repo_url",
                "readme",
                "title",
                "uqr_id"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "git_repo_url": {
                    "type": "string"
                },
                "parent_git_repo_url": {
                    "type": "string"
                },
                "readme": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "uqr_id": {
                    "type": "integer"
                }
            }
        },
        "handlers.GetUsersQuestionsResponseData": {
            "type": "object",
            "required": [
                "question",
                "question_count"
            ],
            "properties": {
                "question": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers._GetUsersQuestionsResponseData"
                    }
                },
                "question_count": {
                    "type": "integer"
                }
            }
        },
        "handlers.IsPublicRequest": {
            "type": "object",
            "properties": {
                "is_public": {
                    "type": "boolean"
                }
            }
        },
        "handlers.LeaderboardScore": {
            "type": "object",
            "required": [
                "question_scores",
                "total_score",
                "user_name"
            ],
            "properties": {
                "question_scores": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.QuestionScore"
                    }
                },
                "total_score": {
                    "type": "number",
                    "example": 200
                },
                "user_name": {
                    "type": "string",
                    "example": "owner"
                }
            }
        },
        "handlers.LoginRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string",
                    "example": "password"
                },
                "token": {
                    "description": "Optional token for API access",
                    "type": "string",
                    "example": ""
                },
                "username": {
                    "type": "string",
                    "example": "username"
                }
            }
        },
        "handlers.PatchQuestionRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Question Description"
                },
                "end_time": {
                    "type": "string",
                    "example": "2006-01-02T15:04:05Z"
                },
                "git_repo_url": {
                    "type": "string",
                    "example": "user_name/repo_name"
                },
                "is_active": {
                    "type": "boolean",
                    "example": true
                },
                "start_time": {
                    "type": "string",
                    "example": "2006-01-02T15:04:05Z"
                },
                "title": {
                    "type": "string",
                    "example": "Question Title"
                }
            }
        },
        "handlers.QuestionScore": {
            "type": "object",
            "required": [
                "git_user_repo_url",
                "question_id",
                "question_title",
                "score"
            ],
            "properties": {
                "git_user_repo_url": {
                    "type": "string",
                    "example": "owner/repo"
                },
                "question_id": {
                    "type": "integer",
                    "example": 1
                },
                "question_title": {
                    "type": "string",
                    "example": "Two Sum"
                },
                "score": {
                    "type": "number",
                    "example": 100
                }
            }
        },
        "handlers.QuestionTestScript": {
            "type": "object",
            "required": [
                "test_script"
            ],
            "properties": {
                "test_script": {
                    "type": "string"
                }
            }
        },
        "handlers.ResetUserPasswordDTO": {
            "type": "object",
            "required": [
                "password"
            ],
            "properties": {
                "password": {
                    "type": "string"
                }
            }
        },
        "handlers.ResponseHTTP": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "handlers.Sandbox": {
            "type": "object",
            "required": [
                "script",
                "source_git_url"
            ],
            "properties": {
                "script": {
                    "type": "string",
                    "example": "#!/bin/bash\n\necho 'Hello, World!'"
                },
                "source_git_url": {
                    "type": "string",
                    "example": "user_name/repo_name"
                }
            }
        },
        "handlers.Score": {
            "type": "object",
            "required": [
                "judge_time",
                "message",
                "score"
            ],
            "properties": {
                "judge_time": {
                    "type": "string",
                    "example": "2006-01-02T15:04:05Z07:00"
                },
                "message": {
                    "type": "string",
                    "example": "Scored successfully"
                },
                "score": {
                    "type": "number",
                    "example": 100
                }
            }
        },
        "handlers.StatusResponse": {
            "type": "object",
            "properties": {
                "available_count": {
                    "type": "integer"
                },
                "processing_count": {
                    "type": "integer"
                },
                "waiting_count": {
                    "type": "integer"
                }
            }
        },
        "handlers.TopExamScore": {
            "type": "object",
            "required": [
                "git_user_repo_url",
                "judge_time",
                "message",
                "point",
                "question_id",
                "score"
            ],
            "properties": {
                "git_user_repo_url": {
                    "type": "string",
                    "example": "owner/repo"
                },
                "judge_time": {
                    "type": "string",
                    "example": "2006-01-02T15:04:05Z07:00"
                },
                "message": {
                    "type": "string",
                    "example": "Scored successfully"
                },
                "point": {
                    "type": "integer",
                    "example": 100
                },
                "question_id": {
                    "type": "integer",
                    "example": 1
                },
                "score": {
                    "type": "number",
                    "example": 100
                }
            }
        },
        "handlers.TopScore": {
            "type": "object",
            "required": [
                "git_user_repo_url",
                "judge_time",
                "message",
                "question_id",
                "score"
            ],
            "properties": {
                "git_user_repo_url": {
                    "type": "string",
                    "example": "owner/repo"
                },
                "judge_time": {
                    "type": "string",
                    "example": "2006-01-02T15:04:05Z07:00"
                },
                "message": {
                    "type": "string",
                    "example": "Scored successfully"
                },
                "question_id": {
                    "type": "integer",
                    "example": 1
                },
                "score": {
                    "type": "number",
                    "example": 100
                }
            }
        },
        "handlers.UpdateUserInfoDTO": {
            "type": "object",
            "properties": {
                "enable": {
                    "type": "boolean"
                },
                "is_public": {
                    "type": "boolean"
                }
            }
        },
        "handlers.WebhookPayload": {
            "type": "object",
            "properties": {
                "after": {
                    "type": "string"
                },
                "before": {
                    "type": "string"
                },
                "commits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/gitea.Commit"
                    }
                },
                "compare_url": {
                    "type": "string"
                },
                "pusher": {
                    "$ref": "#/definitions/gitea.User"
                },
                "ref": {
                    "type": "string"
                },
                "repository": {
                    "$ref": "#/definitions/gitea.Repository"
                },
                "sender": {
                    "$ref": "#/definitions/gitea.User"
                }
            }
        },
        "handlers._GetQuestionListQuestionData": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "end_time": {
                    "type": "string",
                    "example": "2006-01-02T15:04:05Z07:00"
                },
                "git_repo_url": {
                    "type": "string"
                },
                "has_question": {
                    "type": "boolean"
                },
                "id": {
                    "type": "integer"
                },
                "is_active": {
                    "type": "boolean"
                },
                "start_time": {
                    "type": "string",
                    "example": "2006-01-02T15:04:05Z07:00"
                },
                "title": {
                    "type": "string"
                },
                "top_score": {
                    "type": "integer"
                }
            }
        },
        "handlers._GetUsersQuestionsResponseData": {
            "type": "object",
            "required": [
                "description",
                "git_repo_url",
                "parent_git_repo_url",
                "q_id",
                "title",
                "uqr_id"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "git_repo_url": {
                    "type": "string"
                },
                "parent_git_repo_url": {
                    "type": "string"
                },
                "q_id": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "uqr_id": {
                    "type": "integer"
                }
            }
        },
        "handlers.point": {
            "type": "object",
            "required": [
                "score"
            ],
            "properties": {
                "score": {
                    "type": "integer"
                }
            }
        },
        "models.Exam": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "end_time": {
                    "type": "string",
                    "example": "2006-01-02T15:04:05Z07:00"
                },
                "id": {
                    "type": "integer"
                },
                "owner": {
                    "$ref": "#/definitions/models.User"
                },
                "owner_id": {
                    "type": "integer"
                },
                "start_time": {
                    "type": "string",
                    "example": "2006-01-02T15:04:05Z07:00"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "models.Question": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "end_time": {
                    "type": "string",
                    "example": "2006-01-02T15:04:05Z07:00"
                },
                "git_repo_url": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_active": {
                    "type": "boolean"
                },
                "start_time": {
                    "type": "string",
                    "example": "2006-01-02T15:04:05Z07:00"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "models.QuestionTestScript": {
            "type": "object",
            "properties": {
                "execute_script": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "question": {
                    "$ref": "#/definitions/models.Question"
                },
                "question_id": {
                    "type": "integer"
                },
                "score_script": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "test_script": {
                    "type": "string"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "enable": {
                    "type": "boolean"
                },
                "gitea_token": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_admin": {
                    "type": "boolean"
                },
                "is_public": {
                    "type": "boolean"
                },
                "refresh_token": {
                    "type": "string"
                },
                "user_name": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}