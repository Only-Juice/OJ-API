basePath: /
definitions:
  gitea.Commit:
    properties:
      author:
        $ref: '#/definitions/gitea.User'
      commit:
        $ref: '#/definitions/gitea.RepoCommit'
      committer:
        $ref: '#/definitions/gitea.User'
      created:
        type: string
      files:
        items:
          $ref: '#/definitions/gitea.CommitAffectedFiles'
        type: array
      html_url:
        type: string
      parents:
        items:
          $ref: '#/definitions/gitea.CommitMeta'
        type: array
      sha:
        type: string
      stats:
        $ref: '#/definitions/gitea.CommitStats'
      url:
        type: string
    type: object
  gitea.CommitAffectedFiles:
    properties:
      filename:
        type: string
    type: object
  gitea.CommitMeta:
    properties:
      created:
        type: string
      sha:
        type: string
      url:
        type: string
    type: object
  gitea.CommitStats:
    properties:
      additions:
        type: integer
      deletions:
        type: integer
      total:
        type: integer
    type: object
  gitea.CommitUser:
    properties:
      date:
        type: string
      email:
        type: string
      name:
        type: string
    type: object
  gitea.ExternalTracker:
    properties:
      external_tracker_format:
        description: External Issue Tracker URL Format. Use the placeholders {user},
          {repo} and {index} for the username, repository name and issue index.
        type: string
      external_tracker_style:
        description: External Issue Tracker Number Format, either `numeric` or `alphanumeric`
        type: string
      external_tracker_url:
        description: URL of external issue tracker.
        type: string
    type: object
  gitea.ExternalWiki:
    properties:
      external_wiki_url:
        description: URL of external wiki.
        type: string
    type: object
  gitea.InternalTracker:
    properties:
      allow_only_contributors_to_track_time:
        description: Let only contributors track time (Built-in issue tracker)
        type: boolean
      enable_issue_dependencies:
        description: Enable dependencies for issues and pull requests (Built-in issue
          tracker)
        type: boolean
      enable_time_tracker:
        description: Enable time tracking (Built-in issue tracker)
        type: boolean
    type: object
  gitea.MergeStyle:
    enum:
    - merge
    - rebase
    - rebase-merge
    - squash
    type: string
    x-enum-varnames:
    - MergeStyleMerge
    - MergeStyleRebase
    - MergeStyleRebaseMerge
    - MergeStyleSquash
  gitea.PayloadCommitVerification:
    properties:
      payload:
        type: string
      reason:
        type: string
      signature:
        type: string
      verified:
        type: boolean
    type: object
  gitea.Permission:
    properties:
      admin:
        type: boolean
      pull:
        type: boolean
      push:
        type: boolean
    type: object
  gitea.ProjectsMode:
    enum:
    - repo
    - owner
    - all
    type: string
    x-enum-varnames:
    - ProjectsModeRepo
    - ProjectsModeOwner
    - ProjectsModeAll
  gitea.RepoCommit:
    properties:
      author:
        $ref: '#/definitions/gitea.CommitUser'
      committer:
        $ref: '#/definitions/gitea.CommitUser'
      message:
        type: string
      tree:
        $ref: '#/definitions/gitea.CommitMeta'
      url:
        type: string
      verification:
        $ref: '#/definitions/gitea.PayloadCommitVerification'
    type: object
  gitea.Repository:
    properties:
      allow_fast_forward_only_merge:
        type: boolean
      allow_merge_commits:
        type: boolean
      allow_rebase:
        type: boolean
      allow_rebase_explicit:
        type: boolean
      allow_squash_merge:
        type: boolean
      archived:
        type: boolean
      avatar_url:
        type: string
      clone_url:
        type: string
      created_at:
        type: string
      default_branch:
        type: string
      default_delete_branch_after_merge:
        type: boolean
      default_merge_style:
        $ref: '#/definitions/gitea.MergeStyle'
      description:
        type: string
      empty:
        type: boolean
      external_tracker:
        $ref: '#/definitions/gitea.ExternalTracker'
      external_wiki:
        $ref: '#/definitions/gitea.ExternalWiki'
      fork:
        type: boolean
      forks_count:
        type: integer
      full_name:
        type: string
      has_actions:
        type: boolean
      has_issues:
        type: boolean
      has_packages:
        type: boolean
      has_projects:
        type: boolean
      has_pull_requests:
        type: boolean
      has_releases:
        type: boolean
      has_wiki:
        type: boolean
      html_url:
        type: string
      id:
        type: integer
      ignore_whitespace_conflicts:
        type: boolean
      internal:
        type: boolean
      internal_tracker:
        $ref: '#/definitions/gitea.InternalTracker'
      mirror:
        type: boolean
      mirror_interval:
        type: string
      mirror_updated:
        type: string
      name:
        type: string
      object_format_name:
        type: string
      open_issues_count:
        type: integer
      open_pr_counter:
        type: integer
      original_url:
        type: string
      owner:
        $ref: '#/definitions/gitea.User'
      parent:
        $ref: '#/definitions/gitea.Repository'
      permissions:
        $ref: '#/definitions/gitea.Permission'
      private:
        type: boolean
      projects_mode:
        $ref: '#/definitions/gitea.ProjectsMode'
      release_counter:
        type: integer
      size:
        type: integer
      ssh_url:
        type: string
      stars_count:
        type: integer
      template:
        type: boolean
      updated_at:
        type: string
      watchers_count:
        type: integer
      website:
        type: string
    type: object
  gitea.User:
    properties:
      active:
        description: Is user active
        type: boolean
      avatar_url:
        description: URL to the user's avatar
        type: string
      created:
        description: Date and Time of user creation
        type: string
      description:
        description: the user's description
        type: string
      email:
        type: string
      followers_count:
        description: user counts
        type: integer
      following_count:
        type: integer
      full_name:
        description: the user's full name
        type: string
      id:
        description: the user's id
        type: integer
      is_admin:
        description: Is the user an administrator
        type: boolean
      language:
        description: User locale
        type: string
      last_login:
        description: Date and Time of last login
        type: string
      location:
        description: the user's location
        type: string
      login:
        description: the user's username
        type: string
      login_name:
        description: The login_name of non local users (e.g. LDAP / OAuth / SMTP)
        type: string
      prohibit_login:
        description: Is user login prohibited
        type: boolean
      restricted:
        description: Is user restricted
        type: boolean
      source_id:
        description: The ID of the Authentication Source for non local users.
        type: integer
      starred_repos_count:
        type: integer
      visibility:
        allOf:
        - $ref: '#/definitions/gitea.VisibleType'
        description: User visibility level option
      website:
        description: the user's website
        type: string
    type: object
  gitea.VisibleType:
    enum:
    - public
    - limited
    - private
    type: string
    x-enum-varnames:
    - VisibleTypePublic
    - VisibleTypeLimited
    - VisibleTypePrivate
  handlers._GetQuestionListQuestionData:
    properties:
      description:
        type: string
      end_time:
        example: 2006-01-02T15:04:05Z07:00
        type: string
      git_repo_url:
        type: string
      has_question:
        type: boolean
      id:
        type: integer
      is_active:
        type: boolean
      start_time:
        example: 2006-01-02T15:04:05Z07:00
        type: string
      title:
        type: string
      top_score:
        type: integer
    type: object
  handlers._GetUsersQuestionsResponseData:
    properties:
      description:
        type: string
      git_repo_url:
        type: string
      parent_git_repo_url:
        type: string
      q_id:
        type: integer
      title:
        type: string
      uqr_id:
        type: integer
    required:
    - description
    - git_repo_url
    - parent_git_repo_url
    - q_id
    - title
    - uqr_id
    type: object
  handlers.AddQuestionRequest:
    properties:
      description:
        example: Question Description
        type: string
      end_time:
        example: "2006-01-02T15:04:05Z"
        type: string
      git_repo_url:
        example: user_name/repo_name
        type: string
      is_active:
        example: true
        type: boolean
      start_time:
        example: "2006-01-02T15:04:05Z"
        type: string
      title:
        example: Question Title
        type: string
    required:
    - description
    - git_repo_url
    - title
    type: object
  handlers.BasicAuthentication:
    properties:
      password:
        example: password
        type: string
      username:
        example: username
        type: string
    required:
    - password
    - username
    type: object
  handlers.BulkCreateUser:
    properties:
      default_password:
        example: password
        type: string
      email_domain:
        example: example.com
        type: string
      usernames:
        example:
        - username1
        - username2
        items:
          type: string
        type: array
    required:
    - default_password
    - email_domain
    - usernames
    type: object
  handlers.BulkCreateUserItem:
    properties:
      email:
        example: username1@example.com
        type: string
      password:
        example: password
        type: string
      username:
        example: username1
        type: string
    required:
    - email
    - password
    - username
    type: object
  handlers.BulkCreateUserRequest:
    properties:
      user:
        items:
          $ref: '#/definitions/handlers.BulkCreateUserItem'
        type: array
    required:
    - user
    type: object
  handlers.BulkCreateUserResponse:
    properties:
      failed_users:
        additionalProperties:
          type: string
        example:
          username1: error
        type: object
      successful_users:
        example:
        - username1
        items:
          type: string
        type: array
    type: object
  handlers.ChangeUserPasswordRequest:
    properties:
      new_password:
        type: string
      old_password:
        type: string
    required:
    - new_password
    - old_password
    type: object
  handlers.CreatePublicKey:
    properties:
      key:
        example: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC3...
        type: string
      read_only:
        example: true
        type: boolean
      title:
        example: Public Key
        type: string
    required:
    - key
    - read_only
    - title
    type: object
  handlers.EnhancedGetLeaderboardResponseData:
    properties:
      count:
        type: integer
      scores:
        items:
          $ref: '#/definitions/handlers.EnhancedLeaderboardScore'
        type: array
    type: object
  handlers.EnhancedLeaderboardScore:
    properties:
      question_scores:
        items:
          $ref: '#/definitions/handlers.EnhancedQuestionScore'
        type: array
      total_score:
        type: number
      user_name:
        type: string
    type: object
  handlers.EnhancedQuestionScore:
    properties:
      git_user_repo_url:
        type: string
      question_id:
        type: integer
      question_title:
        type: string
      score:
        type: number
      weighted_score:
        type: number
    type: object
  handlers.ExamInfoResponse:
    properties:
      exam_description:
        type: string
      exam_end_time:
        example: "2006-01-02T15:04:05Z"
        type: string
      exam_start_time:
        example: "2006-01-02T15:04:05Z"
        type: string
      exam_title:
        type: string
    type: object
  handlers.ExamListData:
    properties:
      description:
        type: string
      end_time:
        example: "2006-01-02T15:04:05Z"
        type: string
      id:
        type: integer
      start_time:
        example: "2006-01-02T15:04:05Z"
        type: string
      title:
        type: string
    required:
    - title
    type: object
  handlers.ExamQuestionData:
    properties:
      has_question:
        type: boolean
      point:
        type: integer
      question:
        $ref: '#/definitions/models.Question'
      top_score:
        type: integer
    type: object
  handlers.ExamQuestionsResponse:
    properties:
      question_count:
        type: integer
      questions:
        items:
          $ref: '#/definitions/handlers.ExamQuestionData'
        type: array
    type: object
  handlers.ExamRequest:
    properties:
      description:
        type: string
      end_time:
        example: "2006-01-02T15:04:05Z"
        type: string
      start_time:
        example: "2006-01-02T15:04:05Z"
        type: string
      title:
        type: string
    required:
    - title
    type: object
  handlers.GetLeaderboardResponseData:
    properties:
      count:
        type: integer
      scores:
        items:
          $ref: '#/definitions/handlers.LeaderboardScore'
        type: array
    required:
    - count
    - scores
    type: object
  handlers.GetQuestionListResponseData:
    properties:
      question_count:
        type: integer
      questions:
        items:
          $ref: '#/definitions/handlers._GetQuestionListQuestionData'
        type: array
    required:
    - question_count
    - questions
    type: object
  handlers.GetQuestionResponseData:
    properties:
      description:
        type: string
      git_repo_url:
        type: string
      parent_git_repo_url:
        type: string
      readme:
        type: string
      title:
        type: string
    required:
    - description
    - git_repo_url
    - parent_git_repo_url
    - readme
    - title
    type: object
  handlers.GetScoreResponseData:
    properties:
      scores:
        items:
          $ref: '#/definitions/handlers.Score'
        type: array
      scores_count:
        type: integer
    required:
    - scores
    - scores_count
    type: object
  handlers.GetTopExamScoreResponseData:
    properties:
      scores:
        items:
          $ref: '#/definitions/handlers.TopExamScore'
        type: array
      scores_count:
        type: integer
    required:
    - scores
    - scores_count
    type: object
  handlers.GetTopScoreResponseData:
    properties:
      scores:
        items:
          $ref: '#/definitions/handlers.TopScore'
        type: array
      scores_count:
        type: integer
    required:
    - scores
    - scores_count
    type: object
  handlers.GetUserData:
    properties:
      email:
        type: string
      enable:
        type: boolean
      id:
        type: integer
      is_admin:
        type: boolean
      is_public:
        type: boolean
      user_name:
        type: string
    type: object
  handlers.GetUserQuestionResponseData:
    properties:
      description:
        type: string
      git_repo_url:
        type: string
      parent_git_repo_url:
        type: string
      readme:
        type: string
      title:
        type: string
      uqr_id:
        type: integer
    required:
    - description
    - git_repo_url
    - parent_git_repo_url
    - readme
    - title
    - uqr_id
    type: object
  handlers.GetUsersQuestionsResponseData:
    properties:
      question:
        items:
          $ref: '#/definitions/handlers._GetUsersQuestionsResponseData'
        type: array
      question_count:
        type: integer
    required:
    - question
    - question_count
    type: object
  handlers.IsPublicRequest:
    properties:
      is_public:
        type: boolean
    type: object
  handlers.LeaderboardScore:
    properties:
      question_scores:
        items:
          $ref: '#/definitions/handlers.QuestionScore'
        type: array
      total_score:
        example: 200
        type: number
      user_name:
        example: owner
        type: string
    required:
    - question_scores
    - total_score
    - user_name
    type: object
  handlers.LoginRequest:
    properties:
      password:
        example: password
        type: string
      token:
        description: Optional token for API access
        example: ""
        type: string
      username:
        example: username
        type: string
    type: object
  handlers.PatchQuestionRequest:
    properties:
      description:
        example: Question Description
        type: string
      end_time:
        example: "2006-01-02T15:04:05Z"
        type: string
      git_repo_url:
        example: user_name/repo_name
        type: string
      is_active:
        example: true
        type: boolean
      start_time:
        example: "2006-01-02T15:04:05Z"
        type: string
      title:
        example: Question Title
        type: string
    type: object
  handlers.QuestionScore:
    properties:
      git_user_repo_url:
        example: owner/repo
        type: string
      question_id:
        example: 1
        type: integer
      question_title:
        example: Two Sum
        type: string
      score:
        example: 100
        type: number
    required:
    - git_user_repo_url
    - question_id
    - question_title
    - score
    type: object
  handlers.QuestionTestScript:
    properties:
      test_script:
        type: string
    required:
    - test_script
    type: object
  handlers.ResetUserPasswordDTO:
    properties:
      password:
        type: string
    required:
    - password
    type: object
  handlers.ResponseHTTP:
    properties:
      data: {}
      message:
        type: string
      success:
        type: boolean
    type: object
  handlers.Sandbox:
    properties:
      script:
        example: |-
          #!/bin/bash

          echo 'Hello, World!'
        type: string
      source_git_url:
        example: user_name/repo_name
        type: string
    required:
    - script
    - source_git_url
    type: object
  handlers.Score:
    properties:
      judge_time:
        example: 2006-01-02T15:04:05Z07:00
        type: string
      message:
        example: Scored successfully
        type: string
      score:
        example: 100
        type: number
    required:
    - judge_time
    - message
    - score
    type: object
  handlers.StatusResponse:
    properties:
      available_count:
        type: integer
      processing_count:
        type: integer
      waiting_count:
        type: integer
    type: object
  handlers.TopExamScore:
    properties:
      git_user_repo_url:
        example: owner/repo
        type: string
      judge_time:
        example: 2006-01-02T15:04:05Z07:00
        type: string
      message:
        example: Scored successfully
        type: string
      point:
        example: 100
        type: integer
      question_id:
        example: 1
        type: integer
      score:
        example: 100
        type: number
    required:
    - git_user_repo_url
    - judge_time
    - message
    - point
    - question_id
    - score
    type: object
  handlers.TopScore:
    properties:
      git_user_repo_url:
        example: owner/repo
        type: string
      judge_time:
        example: 2006-01-02T15:04:05Z07:00
        type: string
      message:
        example: Scored successfully
        type: string
      question_id:
        example: 1
        type: integer
      score:
        example: 100
        type: number
    required:
    - git_user_repo_url
    - judge_time
    - message
    - question_id
    - score
    type: object
  handlers.UpdateUserInfoDTO:
    properties:
      enable:
        type: boolean
      is_public:
        type: boolean
    type: object
  handlers.WebhookPayload:
    properties:
      after:
        type: string
      before:
        type: string
      commits:
        items:
          $ref: '#/definitions/gitea.Commit'
        type: array
      compare_url:
        type: string
      pusher:
        $ref: '#/definitions/gitea.User'
      ref:
        type: string
      repository:
        $ref: '#/definitions/gitea.Repository'
      sender:
        $ref: '#/definitions/gitea.User'
    type: object
  handlers.point:
    properties:
      score:
        type: integer
    required:
    - score
    type: object
  models.Exam:
    properties:
      description:
        type: string
      end_time:
        example: 2006-01-02T15:04:05Z07:00
        type: string
      id:
        type: integer
      owner:
        $ref: '#/definitions/models.User'
      owner_id:
        type: integer
      start_time:
        example: 2006-01-02T15:04:05Z07:00
        type: string
      title:
        type: string
    type: object
  models.Question:
    properties:
      description:
        type: string
      end_time:
        example: 2006-01-02T15:04:05Z07:00
        type: string
      git_repo_url:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      start_time:
        example: 2006-01-02T15:04:05Z07:00
        type: string
      title:
        type: string
    type: object
  models.QuestionTestScript:
    properties:
      execute_script:
        type: string
      id:
        type: integer
      question:
        $ref: '#/definitions/models.Question'
      question_id:
        type: integer
      test_script:
        type: string
    type: object
  models.User:
    properties:
      email:
        type: string
      enable:
        type: boolean
      gitea_token:
        type: string
      id:
        type: integer
      is_admin:
        type: boolean
      is_public:
        type: boolean
      refresh_token:
        type: string
      user_name:
        type: string
    type: object
info:
  contact: {}
  description: This is a simple OJ-PoC API server.
  title: OJ-PoC API
  version: "1.0"
paths:
  /api/admin/{id}/user:
    get:
      consumes:
      - application/json
      description: Get the user information
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get user information
      tags:
      - admin
    patch:
      consumes:
      - application/json
      description: Update the user information (partially or fully)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User information
        in: body
        name: user
        schema:
          $ref: '#/definitions/handlers.UpdateUserInfoDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Update user information
      tags:
      - admin
  /api/admin/{id}/user/reset_password:
    post:
      consumes:
      - application/json
      description: Reset the password of a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/handlers.ResetUserPasswordDTO'
              type: object
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Reset user password
      tags:
      - admin
  /api/admin/user:
    get:
      consumes:
      - application/json
      description: Get all user information
      parameters:
      - description: page number of results to return (1-based)
        in: query
        name: page
        type: integer
      - description: page size of results. Default is 10.
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.ResponseHTTP'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.User'
                  type: array
              type: object
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get all user information
      tags:
      - admin
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: Use basic authentication or token to login and get access token
        and refresh token
      parameters:
      - description: Login Request
        in: body
        name: LoginRequest
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Return access token and refresh token
          schema:
            $ref: '#/definitions/handlers.ResponseHTTP'
        "503":
          description: Service Unavailable
      summary: User login with username and password
      tags:
      - Auth
  /api/auth/logout:
    post:
      consumes:
      - application/json
      description: Logout user and invalidate refresh token
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            $ref: '#/definitions/handlers.ResponseHTTP'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ResponseHTTP'
      summary: Logout user
      tags:
      - Auth
  /api/auth/refresh:
    post:
      consumes:
      - application/json
      description: Use refresh token to get a new access token
      produces:
      - application/json
      responses:
        "200":
          description: Return new access token
          schema:
            $ref: '#/definitions/handlers.ResponseHTTP'
        "401":
          description: Invalid refresh token
          schema:
            $ref: '#/definitions/handlers.ResponseHTTP'
        "503":
          description: Server error
          schema:
            $ref: '#/definitions/handlers.ResponseHTTP'
      summary: Refresh access token
      tags:
      - Auth
  /api/exams:
    get:
      description: Retrieve a list of all exams
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.ResponseHTTP'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/handlers.ExamListData'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ResponseHTTP'
      summary: List all exams
      tags:
      - Exam
  /api/exams/{id}/exam:
    get:
      description: Retrieve basic information about an exam, including title, description,
        start and end times
      parameters:
      - description: Exam ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/handlers.ExamInfoResponse'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ResponseHTTP'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ResponseHTTP'
      summary: Get basic information about an exam
      tags:
      - Exam
  /api/exams/{id}/leaderboard:
    get:
      consumes:
      - application/json
      description: Retrieve the leaderboard for a specific exam
      parameters:
      - description: Exam ID
        in: path
        name: id
        required: true
        type: string
      - description: Page number of results to return (1-based)
        in: query
        name: page
        type: integer
      - description: Page size of results. Default is 10.
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/handlers.EnhancedGetLeaderboardResponseData'
              type: object
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "503":
          description: Service Unavailable
      summary: Get the leaderboard for an exam
      tags:
      - Exam
  /api/exams/{id}/questions:
    get:
      consumes:
      - application/json
      description: Retrieve all questions associated with a specific exam with user's
        question status and top scores (if authenticated)
      parameters:
      - description: Exam ID
        in: path
        name: id
        required: true
        type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        type: integer
      - description: page size of results. Default is 10.
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/handlers.ExamQuestionsResponse'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ResponseHTTP'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ResponseHTTP'
      security:
      - BearerAuth: []
      summary: Get questions for an exam
      tags:
      - Exam
  /api/exams/{id}/score/top:
    get:
      description: Retrieve the top scores for each question in a specific exam for
        a user
      parameters:
      - description: Exam ID
        in: path
        name: id
        required: true
        type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        type: integer
      - description: page size of results. Default is 10.
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/handlers.GetTopExamScoreResponseData'
              type: object
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "503":
          description: Service Unavailable
      security:
      - BearerAuth: []
      summary: Get top scores for each question in an exam
      tags:
      - Exam
  /api/exams/admin:
    post:
      consumes:
      - application/json
      description: Create a new exam with the provided details
      parameters:
      - description: Exam details
        in: body
        name: exam
        required: true
        schema:
          $ref: '#/definitions/handlers.ExamRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/models.Exam'
              type: object
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Create a new exam
      tags:
      - Exam
  /api/exams/admin/{id}/exam:
    delete:
      description: Delete an exam using its ID
      parameters:
      - description: Exam ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.ResponseHTTP'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ResponseHTTP'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ResponseHTTP'
      security:
      - BearerAuth: []
      summary: Delete an exam by ID
      tags:
      - Exam
    get:
      description: Retrieve an exam's details using its ID
      parameters:
      - description: Exam ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/models.Exam'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ResponseHTTP'
      security:
      - BearerAuth: []
      summary: Get an exam by ID
      tags:
      - Exam
    put:
      consumes:
      - application/json
      description: Update the details of an existing exam by ID
      parameters:
      - description: Exam ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated exam details
        in: body
        name: exam
        required: true
        schema:
          $ref: '#/definitions/models.Exam'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/models.Exam'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ResponseHTTP'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ResponseHTTP'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ResponseHTTP'
      security:
      - BearerAuth: []
      summary: Update an existing exam
      tags:
      - Exam
  /api/exams/admin/{id}/questions/{question_id}/question:
    delete:
      description: Disassociate a question from a specific exam
      parameters:
      - description: Exam ID
        in: path
        name: id
        required: true
        type: string
      - description: Question ID
        in: path
        name: question_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.ResponseHTTP'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ResponseHTTP'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ResponseHTTP'
      security:
      - BearerAuth: []
      summary: Remove a question from an exam
      tags:
      - Exam
    post:
      consumes:
      - application/json
      description: Associate a question with a specific exam
      parameters:
      - description: Exam ID
        in: path
        name: id
        required: true
        type: string
      - description: Question ID
        in: path
        name: question_id
        required: true
        type: string
      - description: Score for the question
        in: body
        name: point
        required: true
        schema:
          $ref: '#/definitions/handlers.point'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.ResponseHTTP'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ResponseHTTP'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ResponseHTTP'
      security:
      - BearerAuth: []
      summary: Add a question to an exam
      tags:
      - Exam
  /api/gitea:
    post:
      consumes:
      - application/json
      description: Receive Gitea hook
      parameters:
      - description: Gitea Hook
        in: body
        name: hook
        required: true
        schema:
          $ref: '#/definitions/handlers.WebhookPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.ResponseHTTP'
            - properties:
                type:
                  $ref: '#/definitions/handlers.WebhookPayload'
              type: object
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ResponseHTTP'
        "410":
          description: Gone
          schema:
            $ref: '#/definitions/handlers.ResponseHTTP'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/handlers.ResponseHTTP'
      summary: Receive Gitea hook
      tags:
      - Gitea
  /api/gitea/{question_id}/question:
    post:
      consumes:
      - application/json
      description: Take a question and create a repository in Gitea
      parameters:
      - description: Question ID
        in: path
        name: question_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.ResponseHTTP'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "503":
          description: Service Unavailable
      security:
      - BearerAuth: []
      summary: Take a question and create a repository in Gitea
      tags:
      - Gitea
  /api/gitea/admin/user/bulk:
    post:
      consumes:
      - application/json
      description: Bulk create User
      parameters:
      - description: Username + Email Domain => username1@example.com
        in: body
        name: Usernames
        required: true
        schema:
          $ref: '#/definitions/handlers.BulkCreateUser'
      produces:
      - application/json
      responses:
        "200":
          description: Return successful and failed users
          schema:
            allOf:
            - $ref: '#/definitions/handlers.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/handlers.BulkCreateUserResponse'
              type: object
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "503":
          description: Service Unavailable
      security:
      - BearerAuth: []
      summary: Bulk create User
      tags:
      - Gitea
  /api/gitea/admin/user/bulk_v2:
    post:
      consumes:
      - application/json
      description: Bulk create User v2
      parameters:
      - description: User Email, Username, Password
        in: body
        name: BulkCreateUserRequest
        required: true
        schema:
          $ref: '#/definitions/handlers.BulkCreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Return successful and failed users
          schema:
            allOf:
            - $ref: '#/definitions/handlers.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/handlers.BulkCreateUserResponse'
              type: object
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "503":
          description: Service Unavailable
      security:
      - BearerAuth: []
      summary: Bulk create User v2
      tags:
      - Gitea
  /api/gitea/auth:
    post:
      consumes:
      - application/json
      description: Use basic authentication to access the Gitea API
      parameters:
      - description: Basic Authentication
        in: body
        name: BasicAuthentication
        required: true
        schema:
          $ref: '#/definitions/handlers.BasicAuthentication'
      produces:
      - application/json
      responses:
        "200":
          description: Return access token
          schema:
            $ref: '#/definitions/handlers.ResponseHTTP'
        "503":
          description: Service Unavailable
      summary: Use basic authentication to access the Gitea API
      tags:
      - Gitea
  /api/gitea/user:
    get:
      consumes:
      - application/json
      description: Get User Profile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/gitea.User'
              type: object
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "503":
          description: Service Unavailable
      security:
      - BearerAuth: []
      summary: Get User Profile
      tags:
      - Gitea
  /api/gitea/user/keys:
    post:
      consumes:
      - application/json
      description: Create a public key in Gitea
      parameters:
      - description: Public Key
        in: body
        name: CreatePublicKey
        required: true
        schema:
          $ref: '#/definitions/handlers.CreatePublicKey'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.ResponseHTTP'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "503":
          description: Service Unavailable
      security:
      - BearerAuth: []
      summary: Create a public key in Gitea
      tags:
      - Gitea
  /api/questions:
    get:
      consumes:
      - application/json
      description: Get a list of questions. Authentication is optional - if authenticated,
        shows user's question status and top score.
      parameters:
      - description: page number of results to return (1-based)
        in: query
        name: page
        type: integer
      - description: page size of results. Default is 10.
        in: query
        name: limit
        type: integer
      - description: 'Filter by question status: ''all'', ''active'', or ''expired''.
          Default is ''all''.'
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.ResponseHTTP'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/handlers.GetQuestionListResponseData'
                  type: array
              type: object
        "404":
          description: Not Found
        "503":
          description: Service Unavailable
      security:
      - BearerAuth: []
      summary: Get a list of questions [Optional Authentication]
      tags:
      - Question
  /api/questions/{ID}/question:
    get:
      consumes:
      - application/json
      description: Retrieve only public questions
      parameters:
      - description: ID of the Question to get
        in: path
        name: ID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/handlers.GetQuestionResponseData'
              type: object
        "404":
          description: Not Found
        "503":
          description: Service Unavailable
      summary: Get a question by ID
      tags:
      - Question
  /api/questions/admin/{ID}/question:
    delete:
      consumes:
      - application/json
      description: Delete a question
      parameters:
      - description: ID of the Question to delete
        in: path
        name: ID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/models.Question'
              type: object
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "503":
          description: Service Unavailable
      security:
      - BearerAuth: []
      summary: Delete a question
      tags:
      - Question
    patch:
      consumes:
      - application/json
      description: Update a question
      parameters:
      - description: Question object
        in: body
        name: question
        required: true
        schema:
          $ref: '#/definitions/handlers.PatchQuestionRequest'
      - description: ID of the Question to update
        in: path
        name: ID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/models.Question'
              type: object
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "503":
          description: Service Unavailable
      security:
      - BearerAuth: []
      summary: Update a question
      tags:
      - Question
  /api/questions/admin/{ID}/test_script:
    get:
      consumes:
      - application/json
      description: Get the test script for a question
      parameters:
      - description: ID of the Question to get the test script for
        in: path
        name: ID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/handlers.QuestionTestScript'
              type: object
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "503":
          description: Service Unavailable
      security:
      - BearerAuth: []
      summary: Get the test script for a question
      tags:
      - Question
  /api/questions/admin/question:
    post:
      consumes:
      - application/json
      description: Add a question
      parameters:
      - description: Question object
        in: body
        name: question
        required: true
        schema:
          $ref: '#/definitions/handlers.AddQuestionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/models.Question'
              type: object
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "503":
          description: Service Unavailable
      security:
      - BearerAuth: []
      summary: Add a question
      tags:
      - Question
  /api/questions/uqr/{UQR_ID}/question:
    get:
      consumes:
      - application/json
      description: Get a question by UQR_ID
      parameters:
      - description: ID of the UserQuestionRelation to get
        in: path
        name: UQR_ID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/handlers.GetQuestionResponseData'
              type: object
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "503":
          description: Service Unavailable
      security:
      - BearerAuth: []
      summary: Get a question by UQR_ID
      tags:
      - Question
  /api/questions/user:
    get:
      consumes:
      - application/json
      description: Get a list of questions by user
      parameters:
      - description: page number of results to return (1-based)
        in: query
        name: page
        type: integer
      - description: page size of results. Default is 10.
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.ResponseHTTP'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/handlers.GetUsersQuestionsResponseData'
                  type: array
              type: object
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "503":
          description: Service Unavailable
      security:
      - BearerAuth: []
      summary: Get a list of questions by user
      tags:
      - Question
  /api/questions/user/{ID}/question:
    get:
      consumes:
      - application/json
      description: Retrieve a specific question associated with a user by its Question
        ID
      parameters:
      - description: ID of the Question to get
        in: path
        name: ID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/handlers.GetUserQuestionResponseData'
              type: object
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "503":
          description: Service Unavailable
      security:
      - BearerAuth: []
      summary: Get a user's question by Question ID
      tags:
      - Question
  /api/sandbox/admin/sandbox_cmd:
    post:
      consumes:
      - application/json
      description: Specify the shell command for the corresponding repo
      parameters:
      - description: Shell command
        in: body
        name: cmd
        required: true
        schema:
          $ref: '#/definitions/handlers.Sandbox'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/models.QuestionTestScript'
              type: object
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "503":
          description: Service Unavailable
      security:
      - BearerAuth: []
      summary: Specify the shell command for the corresponding repo
      tags:
      - Sandbox
  /api/sandbox/status:
    get:
      description: Get the current available sandbox count and waiting count
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/handlers.StatusResponse'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ResponseHTTP'
      summary: Get the current available sandbox count and waiting count
      tags:
      - Sandbox
  /api/score:
    get:
      consumes:
      - application/json
      description: Get a score by repo
      parameters:
      - description: owner of the repo
        in: query
        name: owner
        required: true
        type: string
      - description: name of the repo
        in: query
        name: repo
        required: true
        type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        type: integer
      - description: page size of results. Default is 10.
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/handlers.GetScoreResponseData'
              type: object
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "503":
          description: Service Unavailable
      security:
      - BearerAuth: []
      summary: Get a score by repo
      tags:
      - Score
  /api/score/{question_id}/question:
    get:
      consumes:
      - application/json
      description: Get a score by question ID
      parameters:
      - description: question ID
        in: path
        name: question_id
        required: true
        type: integer
      - description: page number of results to return (1-based)
        in: query
        name: page
        type: integer
      - description: page size of results. Default is 10.
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/handlers.Score'
              type: object
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "503":
          description: Service Unavailable
      security:
      - BearerAuth: []
      summary: Get a score by question ID
      tags:
      - Score
  /api/score/{question_id}/question/user_rescore:
    post:
      consumes:
      - application/json
      description: Re-score a specific user's question by question ID
      parameters:
      - description: question ID
        in: path
        name: question_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.ResponseHTTP'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "503":
          description: Service Unavailable
      security:
      - BearerAuth: []
      summary: Re-score a specific user's question
      tags:
      - Score
  /api/score/admin/{question_id}/question/rescore:
    post:
      consumes:
      - application/json
      description: Re-score a specific question by question ID
      parameters:
      - description: question ID
        in: path
        name: question_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.ResponseHTTP'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "503":
          description: Service Unavailable
      security:
      - BearerAuth: []
      summary: Re-score a specific question
      tags:
      - Score
  /api/score/all:
    get:
      consumes:
      - application/json
      description: Get all scores for the user
      parameters:
      - description: page number of results to return (1-based)
        in: query
        name: page
        type: integer
      - description: page size of results. Default is 10.
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/handlers.GetTopScoreResponseData'
              type: object
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "503":
          description: Service Unavailable
      security:
      - BearerAuth: []
      summary: Get all scores for the user
      tags:
      - Score
  /api/score/leaderboard:
    get:
      consumes:
      - application/json
      description: Get the leaderboard
      parameters:
      - description: page number of results to return (1-based)
        in: query
        name: page
        type: integer
      - description: page size of results. Default is 10.
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/handlers.GetLeaderboardResponseData'
              type: object
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "503":
          description: Service Unavailable
      summary: Get the leaderboard
      tags:
      - Score
  /api/score/top:
    get:
      consumes:
      - application/json
      description: Get the top score of each question for user
      parameters:
      - description: page number of results to return (1-based)
        in: query
        name: page
        type: integer
      - description: page size of results. Default is 10.
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/handlers.GetTopScoreResponseData'
              type: object
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "503":
          description: Service Unavailable
      security:
      - BearerAuth: []
      summary: Get the top score of each question for user
      tags:
      - Score
  /api/score/uqr/{UQR_ID}/score:
    get:
      consumes:
      - application/json
      description: Get a score by UQR ID
      parameters:
      - description: UQR ID
        in: path
        name: UQR_ID
        required: true
        type: integer
      - description: page number of results to return (1-based)
        in: query
        name: page
        type: integer
      - description: page size of results. Default is 10.
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/handlers.Score'
              type: object
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "503":
          description: Service Unavailable
      security:
      - BearerAuth: []
      summary: Get a score by UQR ID
      tags:
      - Score
  /api/user:
    get:
      consumes:
      - application/json
      description: Get user info by ID
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/handlers.GetUserData'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ResponseHTTP'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ResponseHTTP'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ResponseHTTP'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/handlers.ResponseHTTP'
      security:
      - BearerAuth: []
      summary: Get user info
      tags:
      - User
  /api/user/change_password:
    post:
      consumes:
      - application/json
      description: Change user password
      parameters:
      - description: ChangeUserPasswordRequest
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.ChangeUserPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.ResponseHTTP'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "503":
          description: Service Unavailable
      security:
      - BearerAuth: []
      summary: Change user password
      tags:
      - User
  /api/user/is_public:
    post:
      consumes:
      - application/json
      description: Update the user's is_public setting
      parameters:
      - description: is_public
        in: body
        name: is_public
        required: true
        schema:
          $ref: '#/definitions/handlers.IsPublicRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ResponseHTTP'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ResponseHTTP'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ResponseHTTP'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/handlers.ResponseHTTP'
      security:
      - BearerAuth: []
      summary: Set user is_public
      tags:
      - User
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
